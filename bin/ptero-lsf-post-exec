#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';

use Ptero::Proxy::LSF qw();
use Getopt::Long;
use File::Slurp qw(read_file);

main();

sub main {
    validate_execution_environment();

    # LSF service doesn't support gzipped requests
    local $ENV{PTERO_PERL_SDK_PLAINTEXT_REQUESTS} = 1;

    my $lsf_proxy = Ptero::Proxy::LSF->new(url => $ENV{PTERO_LSF_JOB_URL});
    my $values = determine_update_values($lsf_proxy);
    $lsf_proxy->update($values);

    return;
}

sub validate_execution_environment {
    my @EXPECTED_ENV_VARIABLES = qw(
        PTERO_LSF_JOB_URL
        LSB_JOBEXIT_STAT
    );
    my $validated = 1;
    for my $env_var (@EXPECTED_ENV_VARIABLES) {
        unless (defined $ENV{$env_var}) {
            printf STDERR "ptero-lsf-post-exec: Environment Variable %s must be set\n", $env_var;
            $validated = 0;
        }
    }

    exit 1 unless $validated;
    return;
}

sub determine_update_values {
    my $lsf_proxy = shift;

    my $values = {};

    my ($character_limit) = get_options();

    my $lsf_data = $lsf_proxy->job_data();

    my $stderr = $lsf_data->{options}{errFile};
    my $stdout = $lsf_data->{options}{outFile};

    if (defined($stderr) && -e $stderr) {
        $values->{stderr} = fetch_contents($stderr, $character_limit);
        unlink $stderr;
    }
    if (defined($stdout) && -e $stdout) {
        $values->{stdout} = fetch_contents($stdout, $character_limit);
        unlink $stdout;
    }

    $values->{status} = determine_status();
    return $values;
}

sub get_options {
    my ($stderr, $stdout, $character_limit);

    GetOptions(
        "stderr=s" => \$stderr, #deprecated
        "stdout=s" => \$stdout, #deprecated
        "character-limit=s" => \$character_limit,
    );
    return $character_limit;
}

sub fetch_contents {
    my $path = shift;
    my $character_limit = shift || 10_000;

    my $content = read_file($path);
    if (length($content) > $character_limit) {
        $content = substr($content, 0, $character_limit) . "...";
    }
    return $content;
}

sub determine_status {
    my $exit_code = $ENV{LSB_JOBEXIT_STAT};
    if ($exit_code == 0) {
        return 'succeeded';
    } else {
        my $info = $ENV{LSB_JOBEXIT_INFO} || "LSF gave no exit info";
        return ['failed', $info];
    }
}
