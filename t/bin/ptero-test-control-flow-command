#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';

use Data::Dump qw(pp);
use Getopt::Long;
use Ptero::HTTP qw();
use File::Temp qw(tempfile);
use Ptero::Test::Utils qw(
    validate_execution_environment
);

exit main();

sub main {
    validate_execution_environment();

    my $inputs = get_inputs();
    if (exists $inputs->{filename}) {
        unlink($inputs->{filename});
    } else {
        my ($fh, $filename) = tempfile(UNLINK => 0);
        set_outputs({filename => $filename});
    }

    return 0;
}

sub get_inputs {
    my $r = Ptero::HTTP::get($ENV{PTERO_WORKFLOW_EXECUTION_URL});
    return Ptero::HTTP::decode_response($r)->{inputs};
}

sub set_outputs {
    my ($outputs) = @_;
    my $url = $ENV{PTERO_WORKFLOW_EXECUTION_URL};
    my $r = Ptero::HTTP::patch($url, {outputs => $outputs});
    unless ($r->is_success) {
        die sprintf("Unexpected response code (%s: %s) whlie patching %s: %s",
            $r->code, $r->message, $url, pp($outputs));
    }
    return;
}
